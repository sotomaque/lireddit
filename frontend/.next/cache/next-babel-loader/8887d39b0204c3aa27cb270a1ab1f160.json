{"ast":null,"code":"var _jsxFileName = \"/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx\";\nvar __jsx = React.createElement;\nimport { Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport React from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport login from '../login';\n\nconst ChangePassword = ({\n  token\n}) => {\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await login(values);\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.login.errors) {\n        setErrors(toErrorMap(response.data.login.errors));\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.login.user) {\n        router.push('/');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"New Password\",\n    label: \"New Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    variantColor: \"teal\",\n    mt: 4,\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, \"Change Password\"))));\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;","map":{"version":3,"sources":["/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx"],"names":["Button","Formik","Form","React","InputField","Wrapper","toErrorMap","login","ChangePassword","token","newPassword","values","setErrors","response","data","errors","user","router","push","isSubmitting","getInitialProps","query"],"mappings":";;AAAA,SAAcA,MAAd,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAGA,MAAMC,cAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC/D,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KADjB;AAEE,IAAA,QAAQ,EAAG,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AAAA;;AAC1C,YAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACI,MAAD,CAA5B;;AACA,4BAAIE,QAAQ,CAACC,IAAb,mDAAI,eAAeP,KAAf,CAAqBQ,MAAzB,EAAiC;AAC/BH,QAAAA,SAAS,CAACN,UAAU,CAACO,QAAQ,CAACC,IAAT,CAAcP,KAAd,CAAoBQ,MAArB,CAAX,CAAT;AACD,OAFD,MAEO,uBAAIF,QAAQ,CAACC,IAAb,oDAAI,gBAAeP,KAAf,CAAqBS,IAAzB,EAA+B;AACpCC,QAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACD;AACF,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,KAAK,EAAC,cAHR;AAIE,IAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,YAAY,EAAC,MAFf;AAGE,IAAA,EAAE,EAAE,CAHN;AAIE,IAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBATF,CAZJ,CADA,CADF;AAoCH,CArCD;;AAuCAX,cAAc,CAACY,eAAf,GAAiC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC5C,SAAO;AACLZ,IAAAA,KAAK,EAAEY,KAAK,CAACZ;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeD,cAAf","sourcesContent":["import { Box, Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { NextPage } from 'next'\nimport React from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport login from '../login';\n\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n    return (\n      <Wrapper variant='small'>\n      <Formik\n        initialValues={{ newPassword: '' }}\n        onSubmit={ async (values, { setErrors }) => {\n          const response = await login(values);\n          if (response.data?.login.errors) {\n            setErrors(toErrorMap(response.data.login.errors));\n          } else if (response.data?.login.user) {\n            router.push('/');\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"newPassword\"\n              placeholder=\"New Password\"\n              label=\"New Password\"\n              type='password'\n            />\n            \n\n            <Button \n              type='submit'\n              variantColor='teal'\n              mt={4}\n              isLoading={isSubmitting}\n            >\n              Change Password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n    )\n}\n\nChangePassword.getInitialProps = ({query}) => {\n  return {\n    token: query.token as string\n  }\n}\n\nexport default ChangePassword;"]},"metadata":{},"sourceType":"module"}