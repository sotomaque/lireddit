{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/enrique/dev/lireddit/lireddit-web/src/pages/register.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Box, Button } from '@chakra-ui/core';\nimport { Wrapper } from '../components/Wrapper';\nimport { InputField } from '../components/InputField';\nimport { useMutation } from 'urql';\nvar REGISTER_MUTATION = \"\\nmutation Register($username:String!, $password:String!) {\\n  register(options: { username: $username, password: $password }) {\\n    user { \\n      id\\n      username\\n    },\\n    errors {\\n      field\\n      message\\n    }\\n  }\\n}\\n\";\n\nvar Register = function Register(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useMutation = useMutation(REGISTER_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      register = _useMutation2[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return register(values);\n\n              case 2:\n                response = _context.sent;\n                console.log(response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"username\",\n      placeholder: \"username\",\n      label: \"Username\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"password\",\n      placeholder: \"password\",\n      label: \"Password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      type: \"submit\",\n      variantColor: \"teal\",\n      mt: 4,\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, \"Register\"));\n  }));\n};\n\n_s(Register, \"7CEe8jaeeKkSxBnlwahqPb7e3aI=\", false, function () {\n  return [useMutation];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/enrique/dev/lireddit/lireddit-web/src/pages/register.tsx"],"names":["React","Form","Formik","Box","Button","Wrapper","InputField","useMutation","REGISTER_MUTATION","Register","register","username","password","values","response","console","log","isSubmitting"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,SAASC,GAAT,EAAcC,MAAd,QAA4B,iBAA5B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,WAAT,QAA4B,MAA5B;AAMA,IAAMC,iBAAiB,+OAAvB;;AAeA,IAAMC,QAAiC,GAAG,SAApCA,QAAoC,OAAQ;AAAA;;AAAA;;AAAA,qBAC3BF,WAAW,CAACC,iBAAD,CADgB;AAAA;AAAA,MACvCE,QADuC;;AAGhD,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,QAAQ,EAAE;AAA1B,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAG,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACcH,QAAQ,CAACG,MAAD,CADtB;;AAAA;AACHC,gBAAAA,QADG;AAETC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG;AAAA,QAAGG,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,KAAK,EAAC,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,KAAK,EAAC,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,EAcE,MAAC,MAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,YAAY,EAAC,MAFf;AAGE,MAAA,EAAE,EAAE,CAHN;AAIE,MAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,CADD;AAAA,GAPH,CADF,CADF;AAqCD,CAxCD;;GAAMR,Q;UACiBF,W;;;KADjBE,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { Form, Formik } from 'formik';\nimport { Box, Button } from '@chakra-ui/core';\nimport { Wrapper } from '../components/Wrapper';\nimport { InputField } from '../components/InputField';\nimport { useMutation } from 'urql';\n\ninterface registerProps {\n\n}\n\nconst REGISTER_MUTATION = `\nmutation Register($username:String!, $password:String!) {\n  register(options: { username: $username, password: $password }) {\n    user { \n      id\n      username\n    },\n    errors {\n      field\n      message\n    }\n  }\n}\n`\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const [, register] = useMutation(REGISTER_MUTATION);\n\n  return (\n    <Wrapper variant='small'>\n      <Formik\n        initialValues={{ username: '', password: '' }}\n        onSubmit={ async(values) => {\n          const response = await register(values)\n          console.log(response)\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField\n              name=\"username\"\n              placeholder=\"username\"\n              label=\"Username\"\n            />\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"Password\"\n              />\n            </Box>\n\n            <Button \n              type='submit'\n              variantColor='teal'\n              mt={4}\n              isLoading={isSubmitting}\n            >\n              Register\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n}\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}