{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport React from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\n\nvar ChangePassword = function ChangePassword(_ref) {\n  _s();\n\n  var token = _ref.token;\n\n  var _useChangePasswordMut = useChangePasswordMutation(),\n      _useChangePasswordMut2 = _slicedToArray(_useChangePasswordMut, 2),\n      changePassword = _useChangePasswordMut2[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n        var _response$data, _response$data2;\n\n        var setErrors, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setErrors = _ref2.setErrors;\n                _context.next = 3;\n                return changePassword({\n                  newPassword: values.newPassword,\n                  token: token\n                });\n\n              case 3:\n                response = _context.sent;\n\n                if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.login.errors) {\n                  setErrors(toErrorMap(response.data.login.errors));\n                } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.login.user) {\n                  router.push('/');\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var isSubmitting = _ref4.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, __jsx(InputField, {\n      name: \"newPassword\",\n      placeholder: \"New Password\",\n      label: \"New Password\",\n      type: \"password\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }), __jsx(Button, {\n      type: \"submit\",\n      variantColor: \"teal\",\n      mt: 4,\n      isLoading: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }\n    }, \"Change Password\"));\n  }));\n};\n\n_s(ChangePassword, \"Q5MJ7z/+2khnY4WBrKdSP7nCllU=\", false, function () {\n  return [useChangePasswordMutation];\n});\n\n_c = ChangePassword;\n\nChangePassword.getInitialProps = function (_ref5) {\n  var query = _ref5.query;\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx"],"names":["Button","Formik","Form","React","InputField","Wrapper","useChangePasswordMutation","toErrorMap","ChangePassword","token","changePassword","newPassword","values","setErrors","response","data","login","errors","user","router","push","isSubmitting","getInitialProps","query"],"mappings":";;;;;;;;;AAAA,SAAcA,MAAd,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAIA,IAAMC,cAA2C,GAAG,SAA9CA,cAA8C,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,8BACtCH,yBAAyB,EADa;AAAA;AAAA,MACxDI,cADwD;;AAGjE,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAG,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,gBAAAA,SAAjB,SAAiBA,SAAjB;AAAA;AAAA,uBACcH,cAAc,CAAC;AAAEC,kBAAAA,WAAW,EAAEC,MAAM,CAACD,WAAtB;AAAmCF,kBAAAA,KAAK,EAALA;AAAnC,iBAAD,CAD5B;;AAAA;AACHK,gBAAAA,QADG;;AAET,sCAAIA,QAAQ,CAACC,IAAb,mDAAI,eAAeC,KAAf,CAAqBC,MAAzB,EAAiC;AAC/BJ,kBAAAA,SAAS,CAACN,UAAU,CAACO,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,MAArB,CAAX,CAAT;AACD,iBAFD,MAEO,uBAAIH,QAAQ,CAACC,IAAb,oDAAI,gBAAeC,KAAf,CAAqBE,IAAzB,EAA+B;AACpCC,kBAAAA,MAAM,CAACC,IAAP,CAAY,GAAZ;AACD;;AANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,aADP;AAEE,MAAA,WAAW,EAAC,cAFd;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EASE,MAAC,MAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,YAAY,EAAC,MAFf;AAGE,MAAA,EAAE,EAAE,CAHN;AAIE,MAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBATF,CADD;AAAA,GAXH,CADA,CADF;AAoCD,CAvCD;;GAAMb,c;UACuBF,yB;;;KADvBE,c;;AAyCNA,cAAc,CAACc,eAAf,GAAiC,iBAAa;AAAA,MAAXC,KAAW,SAAXA,KAAW;AAC5C,SAAO;AACLd,IAAAA,KAAK,EAAEc,KAAK,CAACd;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeD,cAAf","sourcesContent":["import { Box, Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { NextPage } from 'next'\nimport React from 'react';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport login from '../login';\n\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const [, changePassword] = useChangePasswordMutation();\n\n  return (\n    <Wrapper variant='small'>\n    <Formik\n      initialValues={{ newPassword: '' }}\n      onSubmit={ async (values, { setErrors }) => {\n        const response = await changePassword({ newPassword: values.newPassword, token });\n        if (response.data?.login.errors) {\n          setErrors(toErrorMap(response.data.login.errors));\n        } else if (response.data?.login.user) {\n          router.push('/');\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <InputField\n            name=\"newPassword\"\n            placeholder=\"New Password\"\n            label=\"New Password\"\n            type='password'\n          />\n          \n\n          <Button \n            type='submit'\n            variantColor='teal'\n            mt={4}\n            isLoading={isSubmitting}\n          >\n            Change Password\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  </Wrapper>\n  );\n}\n\nChangePassword.getInitialProps = ({query}) => {\n  return {\n    token: query.token as string\n  }\n}\n\nexport default ChangePassword;"]},"metadata":{},"sourceType":"module"}