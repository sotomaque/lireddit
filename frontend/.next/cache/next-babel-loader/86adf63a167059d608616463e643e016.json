{"ast":null,"code":"var _jsxFileName = \"/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\nconst ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const [tokenError, setTokenError] = useState('');\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: ''\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await changePassword({\n        newPassword: values.newPassword,\n        token\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n        const errorMap = toErrorMap(response.data.changePassword.errors);\n\n        if ('token' in errorMap) {\n          setTokenError(errorMap.token);\n        }\n\n        setErrors(errorMap);\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n        router.push('/');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"New Password\",\n    label: \"New Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    variantColor: \"teal\",\n    mt: 4,\n    isLoading: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"Change Password\"))));\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);","map":{"version":3,"sources":["/Users/enrique/dev/lireddit/lireddit-web/src/pages/change-password/[token].tsx"],"names":["React","useRouter","Button","Formik","Form","InputField","Wrapper","useChangePasswordMutation","toErrorMap","withUrqlClient","createUrqlClient","ChangePassword","token","router","changePassword","tokenError","setTokenError","useState","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","getInitialProps","query"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;AAGA,MAAMC,cAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACjE,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAM,GAAGa,cAAH,IAAqBP,yBAAyB,EAApD;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,EAAD,CAA5C;AACA,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KADjB;AAEE,IAAA,QAAQ,EAAG,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AAAA;;AAC1C,YAAMC,QAAQ,GAAG,MAAMP,cAAc,CAAC;AAAEI,QAAAA,WAAW,EAAEC,MAAM,CAACD,WAAtB;AAAmCN,QAAAA;AAAnC,OAAD,CAArC;;AACA,4BAAIS,QAAQ,CAACC,IAAb,mDAAI,eAAeR,cAAf,CAA8BS,MAAlC,EAA0C;AACxC,cAAMC,QAAQ,GAAGhB,UAAU,CAACa,QAAQ,CAACC,IAAT,CAAcR,cAAd,CAA6BS,MAA9B,CAA3B;;AACA,YAAI,WAAWC,QAAf,EAAyB;AACvBR,UAAAA,aAAa,CAACQ,QAAQ,CAACZ,KAAV,CAAb;AACD;;AACDQ,QAAAA,SAAS,CAACI,QAAD,CAAT;AACD,OAND,MAMO,uBAAIH,QAAQ,CAACC,IAAb,oDAAI,gBAAeR,cAAf,CAA8BW,IAAlC,EAAwC;AAC7CZ,QAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;AACF,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,KAAK,EAAC,cAHR;AAIE,IAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,YAAY,EAAC,MAFf;AAGE,IAAA,EAAE,EAAE,CAHN;AAIE,IAAA,SAAS,EAAEA,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,CAhBJ,CADA,CADF;AAsCD,CA1CD;;AA4CAhB,cAAc,CAACiB,eAAf,GAAiC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAa;AAC5C,SAAO;AACLjB,IAAAA,KAAK,EAAEiB,KAAK,CAACjB;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeH,cAAc,CAACC,gBAAD,CAAd,CAAiCC,cAAjC,CAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next'\nimport { useRouter } from 'next/router';\nimport { Button } from '@chakra-ui/core';\nimport { Formik, Form } from 'formik';\n\nimport { InputField } from '../../components/InputField';\nimport { Wrapper } from '../../components/Wrapper';\nimport { useChangePasswordMutation } from '../../generated/graphql';\nimport { toErrorMap } from '../../utils/toErrorMap';\nimport { withUrqlClient } from 'next-urql';\nimport { createUrqlClient } from '../../utils/createUrqlClient';\n\n\nconst ChangePassword: NextPage<{ token: string }> = ({ token }) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const [tokenError, setTokenError] = useState('')\n  return (\n    <Wrapper variant='small'>\n    <Formik\n      initialValues={{ newPassword: '' }}\n      onSubmit={ async (values, { setErrors }) => {\n        const response = await changePassword({ newPassword: values.newPassword, token });\n        if (response.data?.changePassword.errors) {\n          const errorMap = toErrorMap(response.data.changePassword.errors);\n          if ('token' in errorMap) {\n            setTokenError(errorMap.token);\n          }\n          setErrors(errorMap);\n        } else if (response.data?.changePassword.user) {\n          router.push('/');\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <InputField\n            name=\"newPassword\"\n            placeholder=\"New Password\"\n            label=\"New Password\"\n            type='password'\n          />\n          <Button \n            type='submit'\n            variantColor='teal'\n            mt={4}\n            isLoading={isSubmitting}\n          >\n            Change Password\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  </Wrapper>\n  );\n}\n\nChangePassword.getInitialProps = ({query}) => {\n  return {\n    token: query.token as string\n  }\n}\n\nexport default withUrqlClient(createUrqlClient)(ChangePassword);"]},"metadata":{},"sourceType":"module"}