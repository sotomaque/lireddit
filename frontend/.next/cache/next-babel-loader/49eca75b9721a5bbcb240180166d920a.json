{"ast":null,"code":"var _jsxFileName = \"/Users/enrique/dev/lireddit/lireddit-web/src/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\nimport { Provider, createClient, dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange } from '@urql/exchange-graphcache';\nimport theme from '../theme';\nimport { MeDocument } from '../generated/graphql';\n\nfunction betterUpdateQuery(cache, qi, result, fn) {\n  return cache.updateQuery(qi, data => fn(result, data));\n}\n\nconst client = createClient({\n  url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Provider, {\n    value: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/enrique/dev/lireddit/lireddit-web/src/pages/_app.tsx"],"names":["ThemeProvider","CSSReset","Provider","createClient","dedupExchange","fetchExchange","cacheExchange","theme","MeDocument","betterUpdateQuery","cache","qi","result","fn","updateQuery","data","client","url","fetchOptions","credentials","exchanges","updates","Mutation","login","_result","args","info","query","errors","me","user","register","MyApp","Component","pageProps"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,iBAAxC;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,aAAjC,EAAgDC,aAAhD,QAAqE,MAArE;AACA,SAASC,aAAT,QAAiD,2BAAjD;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,QAAqE,sBAArE;;AAEA,SAASC,iBAAT,CACEC,KADF,EAEEC,EAFF,EAGEC,MAHF,EAIEC,EAJF,EAKE;AACA,SAAOH,KAAK,CAACI,WAAN,CAAkBH,EAAlB,EAAsBI,IAAI,IAAIF,EAAE,CAACD,MAAD,EAASG,IAAT,CAAhC,CAAP;AACD;;AAED,MAAMC,MAAM,GAAGb,YAAY,CAAC;AAAEc,EAAAA,GAAG,EAAE,+BAAP;AAC1BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GADY;AAI1BC,EAAAA,SAAS,EAAE,CAAChB,aAAD,EAAgBE,aAAa,CAAC;AACvCe,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBf,KAAhB,EAAuBgB,IAAvB,KAAgC;AACrCjB,UAAAA,iBAAiB,CACbC,KADa,EAEb;AAAEiB,YAAAA,KAAK,EAAEnB;AAAT,WAFa,EAGbgB,OAHa,EAIb,CAACZ,MAAD,EAASe,KAAT,KAAmB;AACjB,gBAAIf,MAAM,CAACW,KAAP,CAAaK,MAAjB,EAAyB;AACvB,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAEjB,MAAM,CAACW,KAAP,CAAaO;AADZ,eAAP;AAGD;AACF,WAZY,CAAjB;AAcD,SAhBO;AAkBRC,QAAAA,QAAQ,EAAE,CAACP,OAAD,EAAUC,IAAV,EAAgBf,KAAhB,EAAuBgB,IAAvB,KAAgC;AACxCjB,UAAAA,iBAAiB,CACbC,KADa,EAEb;AAAEiB,YAAAA,KAAK,EAAEnB;AAAT,WAFa,EAGbgB,OAHa,EAIb,CAACZ,MAAD,EAASe,KAAT,KAAmB;AACjB,gBAAIf,MAAM,CAACmB,QAAP,CAAgBH,MAApB,EAA4B;AAC1B,qBAAOD,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLE,gBAAAA,EAAE,EAAEjB,MAAM,CAACmB,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAZY,CAAjB;AAcD;AAjCO;AADH;AAD8B,GAAD,CAA7B,EAsCPzB,aAtCO;AAJe,CAAD,CAA3B;;AA6CA,SAAS2B,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAA8C;AAC5C,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAElB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAET,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,SAAD,eAAe2B,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADF,CADF;AAQD;;AAED,eAAeF,KAAf","sourcesContent":["import { ThemeProvider, CSSReset } from '@chakra-ui/core'\nimport { Provider, createClient, dedupExchange, fetchExchange } from 'urql';\nimport { cacheExchange, Cache, QueryInput } from '@urql/exchange-graphcache';\n\nimport theme from '../theme'\nimport { MeDocument, MeQuery, LoginMutation, RegisterMutation } from '../generated/graphql';\n\nfunction betterUpdateQuery<Result, Query>(\n  cache: Cache,\n  qi: QueryInput,\n  result: any,\n  fn: (r: Result, q: Query) => Query\n) {\n  return cache.updateQuery(qi, data => fn(result, data as any) as any)\n}\n\nconst client = createClient({ url: 'http://localhost:4000/graphql',\n  fetchOptions: {\n    credentials: \"include\" \n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery<LoginMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.login.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.login.user,\n                  }\n                }\n              }\n            )\n        },\n\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery<RegisterMutation, MeQuery>(\n              cache,\n              { query: MeDocument },\n              _result,\n              (result, query) => {\n                if (result.register.errors) {\n                  return query;\n                } else {\n                  return {\n                    me: result.register.user,\n                  }\n                }\n              }\n            )\n        }\n      } \n    }\n  }), fetchExchange]\n});\n\nfunction MyApp({ Component, pageProps }: any) {\n  return (\n    <Provider value={client}>\n      <ThemeProvider theme={theme}>\n          <CSSReset />\n          <Component {...pageProps} />\n      </ThemeProvider>\n    </Provider>\n  )\n}\n\nexport default MyApp\n"]},"metadata":{},"sourceType":"module"}